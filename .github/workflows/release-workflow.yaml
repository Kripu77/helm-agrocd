name: Release Workflow

on:
  push:
    branches:
    - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Helm
      uses: azure/setup-helm@v2
      with:
        version: 'latest'

    - name: Bump Helm Chart Version
      run: |
        # Define the path to the Chart.yaml file
        CHART_FILE="Chart.yaml"

        # Read the current version from Chart.yaml
        CURRENT_VERSION=$(grep -E '^version:' "$CHART_FILE" | awk '{print $2}')

        # Parse major, minor, and patch version components
        MAJOR=$(echo "$CURRENT_VERSION" | cut -d. -f1)
        MINOR=$(echo "$CURRENT_VERSION" | cut -d. -f2)
        PATCH=$(echo "$CURRENT_VERSION" | cut -d. -f3)

        # Increment the version (you can customize this logic based on your needs)
        NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"

        # Update the version in Chart.yaml
        sed -i "s/^version: $CURRENT_VERSION/version: $NEW_VERSION/" "$CHART_FILE"

        # Commit the changes
        git config user.email "actions@github.com"
        git config user.name "GitHub Actions"
        git add "$CHART_FILE"
        git commit -m "Bump Helm chart version to $NEW_VERSION"

        # Push the changes to the main branch
        git push origin main


    - name: Get Helm Chart Version
      id: get_version
      run: |
        # Capture the version from Chart.yaml
        VERSION=$(grep -E '^version:' Chart.yaml | awk '{print $2}')
        echo "::set-output name=version::$VERSION"

    - name: Publish Release Notes
      run: |
        # Use the captured version as the release version
        RELEASE_VERSION="${{ steps.get_version.outputs.version }}"
        RELEASE_NAME="v$RELEASE_VERSION"

        # Check if there are tags in the repository
        if [ -z "$(git tag -l)" ]; then
          # No tags, it's the initial release
          RELEASE_NOTES=$(git log --pretty=format:"- %h %s%n%n%B")
        else
          # Tags are present, generate release notes as before
          PREVIOUS_TAG=$(git describe --tags --abbrev=0)
          RELEASE_NOTES=$(git log --pretty=format:"- %h %s%n%n%B" $PREVIOUS_TAG..HEAD)
        fi

        # Publish the release
        curl -X POST https://api.github.com/repos/Kripu77/helm-agrocd/releases \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          -d "{"tag_name":"$RELEASE_NAME","name":"$RELEASE_NAME","body":"$RELEASE_NOTES"}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
